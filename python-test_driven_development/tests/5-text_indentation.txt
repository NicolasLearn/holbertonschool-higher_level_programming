This file is a DOCTEST for the modul "5-text_indentation.py"

>>> text_indentation = __import__('5-text_indentation').text_indentation

>>> str1 = "Test with. all separator: inside the text?"
>>> str1_space = "Test with  .   all separator:    inside the text  ?   "
>>> str2 = "Texte without separator"

##### VALID CASE #####

# Test 1: with normal string contain separator
>>> text_indentation(str1)
Test with.
<BLANKLINE>
all separator:
<BLANKLINE>
inside the text?
<BLANKLINE>

# Test 2: with string contain separator and space
>>> text_indentation(str1_space)
Test with  .
<BLANKLINE>
all separator:
<BLANKLINE>
inside the text  ?
<BLANKLINE>

# Test 3: with empty string
>>> text_indentation("")
<BLANKLINE>
<BLANKLINE>

# Test 4: string without separator
>>> text_indentation(str2)
Texte without separator


##### ERROR CASE #####

# Test 1: with no parameter
>>> text_indentation()
Traceback (most recent call last):
...
TypeError: text_indentation() missing 1 required positional argument: 'text'

# Test 2: with wrong type(int)
>>> text_indentation(5)
Traceback (most recent call last):
...
TypeError: text must be a string

# Test 3: with wrong type(float)
>>> text_indentation(5.5)
Traceback (most recent call last):
...
TypeError: text must be a string

# Test 4: with wrong type(bool)
>>> text_indentation(True)
Traceback (most recent call last):
...
TypeError: text must be a string

# Test 5: with list containing str
>>> text_indentation(["string.str?"])
Traceback (most recent call last):
...
TypeError: text must be a string
